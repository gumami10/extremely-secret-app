{"version":3,"sources":["Stepper/MissingDay/canvas.png","Stepper/DayOne/index.tsx","Stepper/MissingDay/index.tsx","Stepper/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","createStyles","root","display","justifyContent","flexDirection","text","question","fontSize","DayOne","props","classes","React","useState","input","setInput","useEffect","i","toLocaleLowerCase","setAnswer","className","Typography","TextField","onChange","e","target","value","label","variant","error","helperText","img","maxHeight","MissingDay","src","canvas","alt","width","margin","button","backgroundColor","instructions","marginTop","spacing","marginBottom","content","alignItems","HorizontalLinearStepper","step","activeStep","setActiveStep","setError","answer","steps","mission","localStorage","getItem","Number","setItem","toString","Stepper","map","index","labelProps","Step","key","StepLabel","getStepContent","Button","color","onClick","disabled","length","CardStyle","height","App","Card","elevation","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.acda2470.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/canvas.9c96749c.png\";","import React from 'react';\nimport { TextField } from '@material-ui/core'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport  Typography  from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n     display: 'flex',\n     justifyContent: 'center',\n     flexDirection: \"column\"\n    },\n    text: {\n\n    },\n    question: {\n        fontSize: '22px'\n    }\n  }),\n);\n\nexport default function DayOne(props: any) {\n    const classes = useStyles();\n    const [input, setInput] = React.useState('')\n    \n    React.useEffect(() => {\n        let i = input.toLocaleLowerCase()\n        if(i === 'a odisséia dos tontos' || i === 'a odisseia dos tontos') { \n            props.setAnswer(true)\n        }\n    })\n\n    return (\n        <div className={classes.root}>\n            <Typography className={classes.text}>\n                <h3>Salve minha deusa!! <br /></h3>\n                Esse é o primeiro de 7 desafios que eu vou fazer para tu,\n                sendo que eu vou liberar eles um por dia. Se tu conseguir completar todos, no final vai ter um prêmio, rs... <br />\n                Como esse é o primeiro dia, eu vou fazer um desafio bem easy, boa sorte e espero que vc curta! <br />\n                Te amo meu amor {'<3'}\n            </Typography>\n            <Typography className={classes.question}>\n                <h4><strong>Qual é o nome do primeiro filme que nós \"assistimos\" juntinhos quando nos vemos pela 1a vez?</strong></h4>\n            </Typography>\n            <TextField onChange={e => setInput(e.target.value)} label=\"Resposta\" variant=\"filled\" error={props.error} helperText={props.error ? 'Sorry bro' : ''}></TextField>\n        </div>\n    )   \n}\n","import React from 'react'\nimport canvas from './canvas.png'\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    img: {\n        maxHeight: '300px'\n    }\n  }),\n);\n\nexport default function MissingDay () {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            Não fique ansiosa, volte amanhã para mais\n            <img className={classes.img} src={canvas} alt=\"\"/>\n        </div>\n    )\n}","import React, { useEffect } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport DayOne from './DayOne';\nimport MissingDay from './MissingDay/index';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: 'auto',\n      margin: '16px'\n    },\n    button: {\n      width: '300px',\n      backgroundColor: '#1791B1'\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n    content: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n    }\n  }),\n);\n\nfunction getSteps() {\n  return ['Dia 1', 'Dia 2', 'Dia 3', 'Dia 4', 'Dia 5', 'Dia 6', 'Dia Final, rs'];\n}\n\nfunction getStepContent(step: number, error: boolean, setError: Function, setAnswer: any) {\n  switch (step) {\n    case 0:\n      return <DayOne error={error} setAnswer={setAnswer} setError={setError}/>;\n    case 1:\n      return <MissingDay />;\n    case 2:\n      return 'This is the bit I really care about!';\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport default function HorizontalLinearStepper() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [error, setError] = React.useState(false);\n  const [answer, setAnswer] = React.useState(false)\n\n  const steps = getSteps();\n\n  const isNextStepAvailable = (step: number) => {\n    return step === 1;\n  };\n\n  const handleNext = () => {\n    if(answer) {\n        setActiveStep(activeStep + 1)\n        setError(false)\n    } else {\n        setError(true)\n    }\n  };\n\n\n  useEffect(() => {\n      const mission = localStorage.getItem('mission')\n      if(mission) {\n        setActiveStep(Number(mission))\n      }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('mission', activeStep.toString());\n  }, [activeStep])\n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep}>\n        {steps.map((label, index) => {\n          const labelProps: { optional?: React.ReactNode } = {};\n          return (\n            <Step key={label}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <div>\n        <div className={classes.content}>\n            <Typography className={classes.instructions}>{getStepContent(activeStep, error, setError, setAnswer)}</Typography>\n            <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleNext}\n            className={classes.button}\n            disabled={isNextStepAvailable(activeStep)}\n            >\n            {activeStep === steps.length - 1 ? 'Finish' : 'Tentar'}\n            </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { Card } from '@material-ui/core';\nimport Stepper from './Stepper'\n\nconst CardStyle = {\n  height: '500px',\n  width: '1000px',\n  backgroundColor: '#E6E6E6'\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Card elevation={3} style={CardStyle}>\n        <Stepper / >\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}